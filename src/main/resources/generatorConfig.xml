<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!-- 属性文件 -->
    <properties resource="init.properties"/>

    <!-- 数据库驱动 -->
    <classPathEntry location="${classPath}" />

    <context id="DB2Tables" targetRuntime="MyBatis3">

        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- optional，旨在创建class时，对注释进行控制 -->
       <!-- <commentGenerator>
               &lt;!&ndash; 是否生成注释代时间戳  &ndash;&gt;
            <property name="suppressDate" value="true" />
            &lt;!&ndash;  关闭自动生成的注释  &ndash;&gt;
            <property name="suppressAllComments" value="true" />
        </commentGenerator>-->

        <!-- 注释,使用自定义的注释生成类  (非必需) -->
        <commentGenerator type="org.mybatis.generator.comment.MyCommentGenerator"></commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection driverClass="${datasource.driverClass}"
                        connectionURL="${datasource.url}"
                        userId="${datasource.user}"
                        password="${datasource.password}">
            <!-- 针对oracle数据库 -->
            <property name="remarksReporting" value="true"></property>
        </jdbcConnection>


        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver >
            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <javaModelGenerator targetPackage="${model.package}" targetProject="${project.classpath}">
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否允许子包，添加schemaName做为包名,即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="true"/>
            <!-- 给Model添加一个父类 -->
            <!--<property name="rootClass" value="com.biz.Base"/>-->
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--生成xml mapper文件 路径 ,Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="${mapper.package}" targetProject="${project.classpath}">
            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.biz.user.model， true:com.biz.user.model.[schemaName] -->
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!-- 生成mapxml对应client，也就是接口dao -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${mapper.package}" targetProject="${project.classpath}">
            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.biz.user.model， true:com.biz.user.model.[schemaName] -->
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!-- 需要生成的表信息-->
        <!-- % 表示生成所有表,如果不是所有表的配置都一样，可以做针对性的配置。-->
        <table tableName="%">
            <!-- 主键生成机制 参考 http://www.mybatis.org/generator/configreference/generatedKey.html-->
            <generatedKey column="id" sqlStatement="${generatedKey.db.name}" identity="true"/>
        </table>

       <!-- <table tableName="biz_column" domainObjectName="BizColumn"
               enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" enableUpdateByExample="false">
            &lt;!&ndash; 忽略列，不生成bean 字段 &ndash;&gt;
            &lt;!&ndash;<ignoreColumn column="create_time" />&ndash;&gt;
            &lt;!&ndash; 指定列的java数据类型 &ndash;&gt;
            &lt;!&ndash;<columnOverride column="key_type" jdbcType="VARCHAR" />&ndash;&gt;
        </table>

        <table tableName="biz_database" domainObjectName="BizDatabase"></table>
        <table tableName="biz_module" domainObjectName="BizModule"></table>
        <table tableName="biz_table" domainObjectName="BizTable"></table>
        <table tableName="user" domainObjectName="User"></table>

        <table tableName="biz_module_table_relation" domainObjectName="BizModuleTableRelation"></table>
        <table tableName="biz_table_relation" domainObjectName="BizTableRelation"></table>
        <table tableName="biz_user_module_relation" domainObjectName="BizUserModuleRelation"></table>-->

    </context>
</generatorConfiguration>
